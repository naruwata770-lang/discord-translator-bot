import { MessageHandler } from './messageHandler';
import { CommandParser } from '../commands/commandParser';
import { TranslationService } from '../services/translationService';
import { MessageDispatcher } from './messageDispatcher';
import { Message, TextChannel, Collection, Attachment, Embed } from 'discord.js';
import { TranslationResult } from '../types';

jest.mock('../commands/commandParser');
jest.mock('../services/translationService');
jest.mock('./messageDispatcher');

describe('MessageHandler', () => {
  let handler: MessageHandler;
  let mockCommandParser: jest.Mocked<CommandParser>;
  let mockTranslationService: jest.Mocked<TranslationService>;
  let mockDispatcher: jest.Mocked<MessageDispatcher>;
  let mockMessage: jest.Mocked<Message>;
  let mockChannel: jest.Mocked<TextChannel>;

  beforeEach(() => {
    mockCommandParser = new CommandParser() as jest.Mocked<CommandParser>;
    mockTranslationService = {} as jest.Mocked<TranslationService>;
    mockDispatcher = new MessageDispatcher() as jest.Mocked<MessageDispatcher>;

    mockCommandParser.parse = jest.fn();
    mockTranslationService.translate = jest.fn();
    mockTranslationService.multiTranslate = jest.fn();
    mockDispatcher.sendMultiTranslation = jest.fn().mockResolvedValue(undefined);
    mockDispatcher.sendCommandResponse = jest.fn().mockResolvedValue(undefined);
    mockDispatcher.sendError = jest.fn().mockResolvedValue(undefined);

    const targetChannels = ['123456789'];
    handler = new MessageHandler(
      mockCommandParser,
      mockTranslationService,
      mockDispatcher,
      targetChannels
    );

    mockChannel = {
      id: '123456789',
      send: jest.fn().mockResolvedValue(undefined),
    } as any;

    mockMessage = {
      author: {
        bot: false,
      },
      channel: mockChannel,
      channelId: '123456789',
      content: '„Åì„Çì„Å´„Å°„ÅØ',
      attachments: new Collection<string, Attachment>(),
      embeds: [],
    } as any;
  });

  describe('Âü∫Êú¨ÁöÑ„Å™„Éï„Ç£„É´„Çø„É™„É≥„Ç∞', () => {
    it('botËá™Ë∫´„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÅØÁÑ°Ë¶ñ„Åô„Çã', async () => {
      mockMessage.author.bot = true;

      await handler.handle(mockMessage);

      expect(mockTranslationService.translate).not.toHaveBeenCalled();
    });

    it('ÂØæË±°Â§ñ„ÅÆ„ÉÅ„É£„É≥„Éç„É´„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÅØÁÑ°Ë¶ñ„Åô„Çã', async () => {
      mockMessage.channelId = '999999999';

      await handler.handle(mockMessage);

      expect(mockTranslationService.translate).not.toHaveBeenCalled();
    });

    it('ÂØæË±°„ÉÅ„É£„É≥„Éç„É´„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÅØÂá¶ÁêÜ„Åô„Çã', async () => {
      mockCommandParser.parse.mockReturnValue(null);
      mockTranslationService.multiTranslate.mockResolvedValue([
        {
          status: 'success',
          translatedText: '‰Ω†Â•Ω',
          sourceLang: 'ja',
          targetLang: 'zh',
        },
        {
          status: 'success',
          translatedText: 'Hello',
          sourceLang: 'ja',
          targetLang: 'en',
        },
      ]);

      await handler.handle(mockMessage);

      expect(mockTranslationService.multiTranslate).toHaveBeenCalledWith('„Åì„Çì„Å´„Å°„ÅØ');
    });
  });

  describe('„Ç≥„Éû„É≥„ÉâÂá¶ÁêÜ', () => {
    it('!auto on„Ç≥„Éû„É≥„Éâ„ÅßËá™ÂãïÁøªË®≥„ÇíÊúâÂäπÂåñ„Åô„Çã', async () => {
      mockMessage.content = '!auto on';
      mockCommandParser.parse.mockReturnValue({ type: 'auto_on' });

      await handler.handle(mockMessage);

      expect(mockDispatcher.sendCommandResponse).toHaveBeenCalledWith(
        mockChannel,
        '‚úÖ Ëá™ÂãïÁøªË®≥„ÇíÊúâÂäπ„Å´„Åó„Åæ„Åó„Åü'
      );
    });

    it('!auto off„Ç≥„Éû„É≥„Éâ„ÅßËá™ÂãïÁøªË®≥„ÇíÁÑ°ÂäπÂåñ„Åô„Çã', async () => {
      mockMessage.content = '!auto off';
      mockCommandParser.parse.mockReturnValue({ type: 'auto_off' });

      await handler.handle(mockMessage);

      expect(mockDispatcher.sendCommandResponse).toHaveBeenCalledWith(
        mockChannel,
        '‚è∏Ô∏è Ëá™ÂãïÁøªË®≥„ÇíÁÑ°Âäπ„Å´„Åó„Åæ„Åó„Åü'
      );
    });

    it('!auto status„Ç≥„Éû„É≥„Éâ„ÅßÁèæÂú®„ÅÆÁä∂ÊÖã„ÇíË°®Á§∫„Åô„ÇãÔºà„Éá„Éï„Ç©„É´„ÉàONÔºâ', async () => {
      mockMessage.content = '!auto status';
      mockCommandParser.parse.mockReturnValue({ type: 'auto_status' });

      await handler.handle(mockMessage);

      expect(mockDispatcher.sendCommandResponse).toHaveBeenCalledWith(
        mockChannel,
        'ÁèæÂú®„ÅÆÁä∂ÊÖã: ‚úÖ Ëá™ÂãïÁøªË®≥ ON'
      );
    });

    it('!auto status„Ç≥„Éû„É≥„Éâ„ÅßÁèæÂú®„ÅÆÁä∂ÊÖã„ÇíË°®Á§∫„Åô„ÇãÔºàOFFÂæåÔºâ', async () => {
      // ÂÖà„Å´OFF„Å´„Åô„Çã
      mockMessage.content = '!auto off';
      mockCommandParser.parse.mockReturnValue({ type: 'auto_off' });
      await handler.handle(mockMessage);

      // „Çπ„ÉÜ„Éº„Çø„ÇπÁ¢∫Ë™ç
      mockMessage.content = '!auto status';
      mockCommandParser.parse.mockReturnValue({ type: 'auto_status' });
      await handler.handle(mockMessage);

      const calls = (mockDispatcher.sendCommandResponse as jest.Mock).mock.calls;
      const lastCall = calls[calls.length - 1];
      expect(lastCall[1]).toBe('ÁèæÂú®„ÅÆÁä∂ÊÖã: ‚è∏Ô∏è Ëá™ÂãïÁøªË®≥ OFF');
    });
  });

  describe('Ëá™ÂãïÁøªË®≥„ÅÆ„Çπ„Ç≠„ÉÉ„ÉóÂà§ÂÆö', () => {
    beforeEach(() => {
      mockCommandParser.parse.mockReturnValue(null);
    });

    it('Ëá™ÂãïÁøªË®≥„ÅåOFF„ÅÆÂ†¥Âêà„ÅØ„Çπ„Ç≠„ÉÉ„Éó„Åô„Çã', async () => {
      // ÂÖà„Å´OFF„Å´„Åô„Çã
      mockMessage.content = '!auto off';
      mockCommandParser.parse.mockReturnValue({ type: 'auto_off' });
      await handler.handle(mockMessage);

      // ÈÄöÂ∏∏„É°„ÉÉ„Çª„Éº„Ç∏
      mockMessage.content = '„Åì„Çì„Å´„Å°„ÅØ';
      mockCommandParser.parse.mockReturnValue(null);
      await handler.handle(mockMessage);

      // multiTranslate „ÅØ OFFÂæå„Å´Âëº„Å∞„Çå„Å™„ÅÑÔºàOFF„Ç≥„Éû„É≥„ÉâÊôÇ„ÇÇÂëº„Å∞„Çå„Å™„ÅÑÔºâ
      expect(mockTranslationService.multiTranslate).not.toHaveBeenCalled();
    });

    it('Á©∫„É°„ÉÉ„Çª„Éº„Ç∏„ÅØ„Çπ„Ç≠„ÉÉ„Éó„Åô„Çã', async () => {
      mockMessage.content = '';

      await handler.handle(mockMessage);

      expect(mockTranslationService.multiTranslate).not.toHaveBeenCalled();
    });

    it('1ÊñáÂ≠ó„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÅØ„Çπ„Ç≠„ÉÉ„Éó„Åô„Çã', async () => {
      mockMessage.content = 'a';

      await handler.handle(mockMessage);

      expect(mockTranslationService.multiTranslate).not.toHaveBeenCalled();
    });

    it('URL„ÅÆ„Åø„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÅØ„Çπ„Ç≠„ÉÉ„Éó„Åô„Çã', async () => {
      mockMessage.content = 'https://example.com';

      await handler.handle(mockMessage);

      expect(mockTranslationService.multiTranslate).not.toHaveBeenCalled();
    });

    it('ÁµµÊñáÂ≠ó„ÅÆ„Åø„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÅØ„Çπ„Ç≠„ÉÉ„Éó„Åô„Çã', async () => {
      mockMessage.content = 'üòÄüòÉüòÑ';

      await handler.handle(mockMessage);

      expect(mockTranslationService.multiTranslate).not.toHaveBeenCalled();
    });

    it('„Ç≥„Éû„É≥„Éâ(!„ÅßÂßã„Åæ„Çã)„ÅØ„Çπ„Ç≠„ÉÉ„Éó„Åô„Çã', async () => {
      mockMessage.content = '!unknown command';

      await handler.handle(mockMessage);

      expect(mockTranslationService.multiTranslate).not.toHaveBeenCalled();
    });

    it('Ê∑ª‰ªò„Éï„Ç°„Ç§„É´„ÅÆ„Åø(„ÉÜ„Ç≠„Çπ„Éà„Å™„Åó)„ÅØ„Çπ„Ç≠„ÉÉ„Éó„Åô„Çã', async () => {
      mockMessage.content = '';
      mockMessage.attachments = new Collection([
        ['1', { url: 'https://example.com/image.png' } as Attachment],
      ]);

      await handler.handle(mockMessage);

      expect(mockTranslationService.multiTranslate).not.toHaveBeenCalled();
    });

    it('Embed„ÅÆ„Åø(„ÉÜ„Ç≠„Çπ„Éà„Å™„Åó)„ÅØ„Çπ„Ç≠„ÉÉ„Éó„Åô„Çã', async () => {
      mockMessage.content = '';
      mockMessage.embeds = [{ title: 'Test Embed' } as Embed];

      await handler.handle(mockMessage);

      expect(mockTranslationService.multiTranslate).not.toHaveBeenCalled();
    });
  });

  describe('Ëá™ÂãïÁøªË®≥„ÅÆÂÆüË°å', () => {
    beforeEach(() => {
      mockCommandParser.parse.mockReturnValue(null);
    });

    it('ÈÄöÂ∏∏„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÁøªË®≥„Åó„Å¶ÈÄÅ‰ø°„Åô„Çã', async () => {
      const multiTranslationResults = [
        {
          status: 'success' as const,
          translatedText: '‰Ω†Â•Ω',
          sourceLang: 'ja',
          targetLang: 'zh',
        },
        {
          status: 'success' as const,
          translatedText: 'Hello',
          sourceLang: 'ja',
          targetLang: 'en',
        },
      ];
      mockTranslationService.multiTranslate.mockResolvedValue(multiTranslationResults);

      await handler.handle(mockMessage);

      expect(mockTranslationService.multiTranslate).toHaveBeenCalledWith('„Åì„Çì„Å´„Å°„ÅØ');
      expect(mockDispatcher.sendMultiTranslation).toHaveBeenCalledWith(
        multiTranslationResults,
        mockMessage,
        '„Åì„Çì„Å´„Å°„ÅØ'
      );
    });

    it('ÁøªË®≥„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„ÅüÂ†¥Âêà„ÅØ„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈÄÅ‰ø°„Åô„Çã', async () => {
      const error = new Error('Translation failed');
      mockTranslationService.multiTranslate.mockRejectedValue(error);

      await handler.handle(mockMessage);

      expect(mockDispatcher.sendError).toHaveBeenCalledWith(mockChannel, error);
    });
  });
});
